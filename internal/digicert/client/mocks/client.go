// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/digicert/client.go

// Package mock_digicert is a generated GoMock package.
package mock_digicert

import (
	reflect "reflect"

	model "github.com/digicert/digicert-terraform-provider/model"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockClient) Authorize(hostUrl, apiKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", hostUrl, apiKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authorize indicates an expected call of Authorize.
func (mr *MockClientMockRecorder) Authorize(hostUrl, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockClient)(nil).Authorize), hostUrl, apiKey)
}

// GetProfile mocks base method.
func (m *MockClient) GetProfile(profileId string) (*model.ProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", profileId)
	ret0, _ := ret[0].(*model.ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockClientMockRecorder) GetProfile(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockClient)(nil).GetProfile), profileId)
}

// IssueCertificate mocks base method.
func (m *MockClient) IssueCertificate(certificateRequest *model.CertificateRequest) (*model.CertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCertificate", certificateRequest)
	ret0, _ := ret[0].(*model.CertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificate indicates an expected call of IssueCertificate.
func (mr *MockClientMockRecorder) IssueCertificate(certificateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificate", reflect.TypeOf((*MockClient)(nil).IssueCertificate), certificateRequest)
}

// PickupCertificate mocks base method.
func (m *MockClient) PickupCertificate(requestId, profileId string) (*model.CertificateResponse, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PickupCertificate", requestId, profileId)
	ret0, _ := ret[0].(*model.CertificateResponse)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PickupCertificate indicates an expected call of PickupCertificate.
func (mr *MockClientMockRecorder) PickupCertificate(requestId, profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PickupCertificate", reflect.TypeOf((*MockClient)(nil).PickupCertificate), requestId, profileId)
}

// ReadCertificate mocks base method.
func (m *MockClient) ReadCertificate(serialNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCertificate", serialNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCertificate indicates an expected call of ReadCertificate.
func (mr *MockClientMockRecorder) ReadCertificate(serialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCertificate", reflect.TypeOf((*MockClient)(nil).ReadCertificate), serialNumber)
}

// RevokeCertificate mocks base method.
func (m *MockClient) RevokeCertificate(serialNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCertificate", serialNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeCertificate indicates an expected call of RevokeCertificate.
func (mr *MockClientMockRecorder) RevokeCertificate(serialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCertificate", reflect.TypeOf((*MockClient)(nil).RevokeCertificate), serialNumber)
}
